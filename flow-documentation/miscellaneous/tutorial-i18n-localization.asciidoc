---
title: Localization
order: 8
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= I18N localization

To use localization and translation strings the application only needs to implement
`I18NProvider` which is then automatically used by the application to determine the
initial locale to use in the ui.

[NOTE]
Only on `I18NProvider` implementation should be available.

The initial locale is decided by matching the locales provided by the `I18NProvider`
against the `Accept-Language` header in the initial response from the client.

If an exact match (language + country) is found that will then be used, else we
will try to match on only language. If neither is found the locale will be set
to the first 'supported' locale from `I18NProvider.getProvidedLocales()` and if
that is empty `Locale.getDefault()` will be used.

== Provider sample for translation

For this example we enable Finnish and English to be used with Finnish being the
*"default"* that is used if the user client doesn't specify english as an accepted language.

In this sample the language `.properties` files start with *"translate"* e.g.
`translate.properties` (for default), `translate_fi_FI.properties` and `translate_en_GB.properties`

The translation properties files are in the example loaded using the class loader
so they should be located on the classpath for example in the resources folder
e.g. `src/main/resources` for a default maven setup.

The `LoadingCache` used in the implementation is from the Google Guava package.

.Sample i18n provider implementation
[source, java]
----
public class Lang implements I18NProvider {

    public static final String BUNDLE_PREFIX = "translate";

    public final Locale LOCALE_FI = new Locale("fi", "FI");
    public final Locale LOCALE_EN = new Locale("en", "GB");

    List<Locale> locales = Collections
            .unmodifiableList(Arrays.asList(LOCALE_FI, LOCALE_EN));

    private final LoadingCache<Locale, ResourceBundle> bundleCache = CacheBuilder
            .newBuilder().expireAfterWrite(1, TimeUnit.DAYS)
            .build(new CacheLoader<Locale, ResourceBundle>() {

                @Override
                public ResourceBundle load(final Locale key)
                        throws Exception {
                    return initializeBundle(key);
                }
            });

    @Override
    public List<Locale> getProvidedLocales() {
        return locales;
    }

    @Override
    public String getTranslation(String key, Object... params) {
        if (key == null) {
            Logger.getLogger(I18NTutorial.Lang.class.getName()).log(Level.WARNING,
                    "Got lang request for key with null value!");
            return "";
        }
        return getTranslation(key, getLocale(), params);
    }

    @Override
    public String getTranslation(String key, Locale locale,
            Object... params) {
        if (key == null) {
            Logger.getLogger(I18NTutorial.Lang.class.getName()).log(Level.WARNING,
                    "Got lang request for key with null value!");
            return "";
        }

        final ResourceBundle bundle = bundleCache.getUnchecked(locale);

        String value;
        try {
            value = bundle.getString(key);
        } catch (final MissingResourceException e) {
            Logger.getLogger(I18NTutorial.Lang.class.getName()).log(Level.WARNING,
                    "Missing resource", e);
            return "!" + locale.getLanguage() + ": " + key;
        }
        if (params.length > 0) {
            value = MessageFormat.format(value, params);
        }
        return value;
    }

    private ResourceBundle initializeBundle(final Locale locale) {
        return readProperties(locale);
    }

    protected ResourceBundle readProperties(final Locale locale) {
        final ClassLoader cl = I18NTutorial.Lang.class.getClassLoader();

        ResourceBundle propertiesBundle = null;
        try {
            propertiesBundle = ResourceBundle.getBundle(BUNDLE_PREFIX,
                    locale, cl);
        } catch (final MissingResourceException e) {
            Logger.getLogger(I18NTutorial.Lang.class.getName()).log(Level.WARNING,
                    "Missing resource", e);
        }
        return propertiesBundle;
    }
}
----
